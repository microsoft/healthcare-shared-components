parameters:
  pack: 'true'

variables:
  ${{ if eq(Agent.OS, 'Linux') }}:
    testProjects: '**/*[t|T]est*/*.csproj'
  ${{ else }}:
    testProjects: '**/*UnitTests/*.csproj'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET (global.json)'
  inputs:
    useGlobalJson: true

- task: UseDotNet@2
  displayName: 'Use .NET 5.x SDK'
  inputs:
    packageType: sdk
    version: 5.x

- task: DotNetCoreCLI@2
  displayName: 'dotnet build -c $(buildConfiguration)'
  inputs:
    command: build
    arguments: '--configuration $(buildConfiguration) -p:AssemblyVersion="$(assemblySemVer)" -p:FileVersion="$(assemblySemFileVer)" -p:InformationalVersion="$(informationalVersion)" -p:ContinuousIntegrationBuild=true'

- ${{ if eq(Agent.OS, 'Linux') }}:
  - script: docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=T3stP@ssw0rd" -p 1433:1433 -d --rm --name sql-server mcr.microsoft.com/mssql/server:2019-latest
    displayName: 'Start SQL Server'

- ${{ if eq(Agent.OS, 'Linux') }}:
  - bash: for i in {1..6}; do docker exec sql-server sh -c "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P T3stP@ssw0rd -Q 'SELECT * FROM INFORMATION_SCHEMA.TABLES'" && exit 0 || sleep 5; done; exit 1
    displayName: 'Wait for SQL Server'

- ${{ if eq(Agent.OS, 'Linux') }}:
- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '$(testProjects)'
    arguments: '--configuration $(buildConfiguration) --no-build'
  ${{ if eq(Agent.OS, 'Linux') }}:
    env:
      TestSqlConnectionString: 'Server=(local);Persist Security Info=False;User ID=sa;Password=T3stP@ssw0rd;MultipleActiveResultSets=False;Connection Timeout=30;TrustServerCertificate=true'

- ${{ if eq(Agent.OS, 'Linux') }}:
  - script: docker stop sql-server
    displayName: 'Stop SQL Server'
    condition: always()

- ${{ if eq(parameters.pack, 'true') }}:
  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: pack
      configuration: '$(buildConfiguration)'
      packDirectory: '$(build.artifactStagingDirectory)/nupkgs'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'nuGetVersion'
      nobuild: true
