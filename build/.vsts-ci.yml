# DESCRIPTION: 
# Builds, tests and packages the solution for the CI build configuration.
trigger:
- master

pr: none

name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:-r)
variables:
  buildConfiguration: 'Release'
jobs:
- job: Semver
  pool:
    vmImage: 'windows-latest'
  steps:
  - template: ./update-semver.yml
  - script: echo %Action%%BuildVersion%
    displayName: 'Set build version'
    env:
      Action: '##vso[build.updatebuildnumber]'
      BuildVersion: $(GitVersion.semVer)

- job: Windows
  pool:
    vmImage: 'windows-latest'
  dependsOn:
  - Semver
  variables:
    assemblySemVer: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.assemblySemVer']]
    assemblySemFileVer: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.assemblySemFileVer']]
    informationalVersion: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.informationalVersion']]
    majorMinorPatch: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.majorMinorPatch']]
    nuGetVersion: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.nuGetVersion']]
  steps:
  - template: build.yml

- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn:
  - Semver
  variables:
    assemblySemVer: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.assemblySemVer']]
    assemblySemFileVer: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.assemblySemFileVer']]
    informationalVersion: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.informationalVersion']]
    majorMinorPatch: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.majorMinorPatch']]
    nuGetVersion: $[dependencies.Semver.outputs['SetVariablesFromGitVersion.nuGetVersion']]
  steps:
  - template: build.yml
    parameters:
      packageArtifacts: false